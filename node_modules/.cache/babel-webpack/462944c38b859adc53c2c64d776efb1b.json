{"ast":null,"code":"import _get from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/get\";\nimport _classCallCheck from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _isNativeReflectConstruct from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nimport _getPrototypeOf from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nfunction _superPropGet(t, o, e, r) { var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), o, e); return 2 & r && \"function\" == typeof p ? function (t) { return p.apply(e, t); } : p; }\n\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nexport var ConnectableObservable = /*#__PURE__*/function (_Observable) {\n  function ConnectableObservable(source, subjectFactory) {\n    var _this;\n\n    _classCallCheck(this, ConnectableObservable);\n\n    _this = _callSuper(this, ConnectableObservable);\n    _this.source = source;\n    _this.subjectFactory = subjectFactory;\n    _this._refCount = 0;\n    _this._isComplete = false;\n    return _this;\n  }\n\n  _inherits(ConnectableObservable, _Observable);\n\n  return _createClass(ConnectableObservable, [{\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      return this.getSubject().subscribe(subscriber);\n    }\n  }, {\n    key: \"getSubject\",\n    value: function getSubject() {\n      var subject = this._subject;\n\n      if (!subject || subject.isStopped) {\n        this._subject = this.subjectFactory();\n      }\n\n      return this._subject;\n    }\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      var connection = this._connection;\n\n      if (!connection) {\n        this._isComplete = false;\n        connection = this._connection = new Subscription();\n        connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n\n        if (connection.closed) {\n          this._connection = null;\n          connection = Subscription.EMPTY;\n        }\n      }\n\n      return connection;\n    }\n  }, {\n    key: \"refCount\",\n    value: function refCount() {\n      return higherOrderRefCount()(this);\n    }\n  }]);\n}(Observable);\nexport var connectableObservableDescriptor = function () {\n  var connectableProto = ConnectableObservable.prototype;\n  return {\n    operator: {\n      value: null\n    },\n    _refCount: {\n      value: 0,\n      writable: true\n    },\n    _subject: {\n      value: null,\n      writable: true\n    },\n    _connection: {\n      value: null,\n      writable: true\n    },\n    _subscribe: {\n      value: connectableProto._subscribe\n    },\n    _isComplete: {\n      value: connectableProto._isComplete,\n      writable: true\n    },\n    getSubject: {\n      value: connectableProto.getSubject\n    },\n    connect: {\n      value: connectableProto.connect\n    },\n    refCount: {\n      value: connectableProto.refCount\n    }\n  };\n}();\n\nvar ConnectableSubscriber = /*#__PURE__*/function (_SubjectSubscriber) {\n  function ConnectableSubscriber(destination, connectable) {\n    var _this2;\n\n    _classCallCheck(this, ConnectableSubscriber);\n\n    _this2 = _callSuper(this, ConnectableSubscriber, [destination]);\n    _this2.connectable = connectable;\n    return _this2;\n  }\n\n  _inherits(ConnectableSubscriber, _SubjectSubscriber);\n\n  return _createClass(ConnectableSubscriber, [{\n    key: \"_error\",\n    value: function _error(err) {\n      this._unsubscribe();\n\n      _superPropGet(ConnectableSubscriber, \"_error\", this, 3)([err]);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.connectable._isComplete = true;\n\n      this._unsubscribe();\n\n      _superPropGet(ConnectableSubscriber, \"_complete\", this, 3)([]);\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var connectable = this.connectable;\n\n      if (connectable) {\n        this.connectable = null;\n        var connection = connectable._connection;\n        connectable._refCount = 0;\n        connectable._subject = null;\n        connectable._connection = null;\n\n        if (connection) {\n          connection.unsubscribe();\n        }\n      }\n    }\n  }]);\n}(SubjectSubscriber);\n\nvar RefCountOperator = /*#__PURE__*/function () {\n  function RefCountOperator(connectable) {\n    _classCallCheck(this, RefCountOperator);\n\n    this.connectable = connectable;\n  }\n\n  return _createClass(RefCountOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      var connectable = this.connectable;\n      connectable._refCount++;\n      var refCounter = new RefCountSubscriber(subscriber, connectable);\n      var subscription = source.subscribe(refCounter);\n\n      if (!refCounter.closed) {\n        refCounter.connection = connectable.connect();\n      }\n\n      return subscription;\n    }\n  }]);\n}();\n\nvar RefCountSubscriber = /*#__PURE__*/function (_Subscriber) {\n  function RefCountSubscriber(destination, connectable) {\n    var _this3;\n\n    _classCallCheck(this, RefCountSubscriber);\n\n    _this3 = _callSuper(this, RefCountSubscriber, [destination]);\n    _this3.connectable = connectable;\n    return _this3;\n  }\n\n  _inherits(RefCountSubscriber, _Subscriber);\n\n  return _createClass(RefCountSubscriber, [{\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var connectable = this.connectable;\n\n      if (!connectable) {\n        this.connection = null;\n        return;\n      }\n\n      this.connectable = null;\n      var refCount = connectable._refCount;\n\n      if (refCount <= 0) {\n        this.connection = null;\n        return;\n      }\n\n      connectable._refCount = refCount - 1;\n\n      if (refCount > 1) {\n        this.connection = null;\n        return;\n      }\n\n      var connection = this.connection;\n      var sharedConnection = connectable._connection;\n      this.connection = null;\n\n      if (sharedConnection && (!connection || sharedConnection === connection)) {\n        sharedConnection.unsubscribe();\n      }\n    }\n  }]);\n}(Subscriber); //# sourceMappingURL=ConnectableObservable.js.map","map":{"version":3,"sources":["C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/rxjs/_esm2015/internal/observable/ConnectableObservable.js"],"names":["SubjectSubscriber","Observable","Subscriber","Subscription","refCount","higherOrderRefCount","ConnectableObservable","source","subjectFactory","_refCount","_isComplete","_subscribe","subscriber","getSubject","subscribe","subject","_subject","isStopped","connect","connection","_connection","add","ConnectableSubscriber","closed","EMPTY","connectableObservableDescriptor","connectableProto","prototype","operator","value","writable","destination","connectable","_error","err","_unsubscribe","_complete","unsubscribe","RefCountOperator","call","refCounter","RefCountSubscriber","subscription","sharedConnection"],"mappings":"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","sourcesContent":["import { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nexport class ConnectableObservable extends Observable {\n    constructor(source, subjectFactory) {\n        super();\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._refCount = 0;\n        this._isComplete = false;\n    }\n    _subscribe(subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    }\n    getSubject() {\n        const subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    }\n    connect() {\n        let connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n        }\n        return connection;\n    }\n    refCount() {\n        return higherOrderRefCount()(this);\n    }\n}\nexport const connectableObservableDescriptor = (() => {\n    const connectableProto = ConnectableObservable.prototype;\n    return {\n        operator: { value: null },\n        _refCount: { value: 0, writable: true },\n        _subject: { value: null, writable: true },\n        _connection: { value: null, writable: true },\n        _subscribe: { value: connectableProto._subscribe },\n        _isComplete: { value: connectableProto._isComplete, writable: true },\n        getSubject: { value: connectableProto.getSubject },\n        connect: { value: connectableProto.connect },\n        refCount: { value: connectableProto.refCount }\n    };\n})();\nclass ConnectableSubscriber extends SubjectSubscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _error(err) {\n        this._unsubscribe();\n        super._error(err);\n    }\n    _complete() {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        super._complete();\n    }\n    _unsubscribe() {\n        const connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            const connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    }\n}\nclass RefCountOperator {\n    constructor(connectable) {\n        this.connectable = connectable;\n    }\n    call(subscriber, source) {\n        const { connectable } = this;\n        connectable._refCount++;\n        const refCounter = new RefCountSubscriber(subscriber, connectable);\n        const subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    }\n}\nclass RefCountSubscriber extends Subscriber {\n    constructor(destination, connectable) {\n        super(destination);\n        this.connectable = connectable;\n    }\n    _unsubscribe() {\n        const { connectable } = this;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        const refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        const { connection } = this;\n        const sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    }\n}\n//# sourceMappingURL=ConnectableObservable.js.map"]},"metadata":{},"sourceType":"module"}