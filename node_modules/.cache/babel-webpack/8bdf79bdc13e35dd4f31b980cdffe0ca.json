{"ast":null,"code":"import _possibleConstructorReturn from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _isNativeReflectConstruct from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nimport _getPrototypeOf from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n\nfunction _superPropGet(t, o, e, r) { var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), o, e); return 2 & r && \"function\" == typeof p ? function (t) { return p.apply(e, t); } : p; }\n\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowToggle(openings, closingSelector) {\n  return function (source) {\n    return source.lift(new WindowToggleOperator(openings, closingSelector));\n  };\n}\n\nvar WindowToggleOperator = /*#__PURE__*/function () {\n  function WindowToggleOperator(openings, closingSelector) {\n    _classCallCheck(this, WindowToggleOperator);\n\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n  }\n\n  return _createClass(WindowToggleOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    }\n  }]);\n}();\n\nvar WindowToggleSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  function WindowToggleSubscriber(destination, openings, closingSelector) {\n    var _this;\n\n    _classCallCheck(this, WindowToggleSubscriber);\n\n    _this = _callSuper(this, WindowToggleSubscriber, [destination]);\n    _this.openings = openings;\n    _this.closingSelector = closingSelector;\n    _this.contexts = [];\n\n    _this.add(_this.openSubscription = subscribeToResult(_this, openings, openings));\n\n    return _this;\n  }\n\n  _inherits(WindowToggleSubscriber, _OuterSubscriber);\n\n  return _createClass(WindowToggleSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var contexts = this.contexts;\n\n      if (contexts) {\n        var len = contexts.length;\n\n        for (var i = 0; i < len; i++) {\n          contexts[i].window.next(value);\n        }\n      }\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      var contexts = this.contexts;\n      this.contexts = null;\n\n      if (contexts) {\n        var len = contexts.length;\n        var index = -1;\n\n        while (++index < len) {\n          var context = contexts[index];\n          context.window.error(err);\n          context.subscription.unsubscribe();\n        }\n      }\n\n      _superPropGet(WindowToggleSubscriber, \"_error\", this, 3)([err]);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var contexts = this.contexts;\n      this.contexts = null;\n\n      if (contexts) {\n        var len = contexts.length;\n        var index = -1;\n\n        while (++index < len) {\n          var context = contexts[index];\n          context.window.complete();\n          context.subscription.unsubscribe();\n        }\n      }\n\n      _superPropGet(WindowToggleSubscriber, \"_complete\", this, 3)([]);\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var contexts = this.contexts;\n      this.contexts = null;\n\n      if (contexts) {\n        var len = contexts.length;\n        var index = -1;\n\n        while (++index < len) {\n          var context = contexts[index];\n          context.window.unsubscribe();\n          context.subscription.unsubscribe();\n        }\n      }\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n      if (outerValue === this.openings) {\n        var closingNotifier;\n\n        try {\n          var closingSelector = this.closingSelector;\n          closingNotifier = closingSelector(innerValue);\n        } catch (e) {\n          return this.error(e);\n        }\n\n        var window = new Subject();\n        var subscription = new Subscription();\n        var context = {\n          window: window,\n          subscription: subscription\n        };\n        this.contexts.push(context);\n        var innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          innerSubscription.context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n      } else {\n        this.closeWindow(this.contexts.indexOf(outerValue));\n      }\n    }\n  }, {\n    key: \"notifyError\",\n    value: function notifyError(err) {\n      this.error(err);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete(inner) {\n      if (inner !== this.openSubscription) {\n        this.closeWindow(this.contexts.indexOf(inner.context));\n      }\n    }\n  }, {\n    key: \"closeWindow\",\n    value: function closeWindow(index) {\n      if (index === -1) {\n        return;\n      }\n\n      var contexts = this.contexts;\n      var context = contexts[index];\n      var window = context.window,\n          subscription = context.subscription;\n      contexts.splice(index, 1);\n      window.complete();\n      subscription.unsubscribe();\n    }\n  }]);\n}(OuterSubscriber); //# sourceMappingURL=windowToggle.js.map","map":{"version":3,"sources":["C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/rxjs/_esm2015/internal/operators/windowToggle.js"],"names":["Subject","Subscription","OuterSubscriber","subscribeToResult","windowToggle","openings","closingSelector","source","lift","WindowToggleOperator","call","subscriber","subscribe","WindowToggleSubscriber","destination","contexts","add","openSubscription","_next","value","len","length","i","window","next","_error","err","index","context","error","subscription","unsubscribe","_complete","complete","_unsubscribe","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","closingNotifier","e","push","innerSubscription","closed","closeWindow","indexOf","notifyError","notifyComplete","inner","splice"],"mappings":"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","sourcesContent":["import { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowToggle(openings, closingSelector) {\n    return (source) => source.lift(new WindowToggleOperator(openings, closingSelector));\n}\nclass WindowToggleOperator {\n    constructor(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    }\n}\nclass WindowToggleSubscriber extends OuterSubscriber {\n    constructor(destination, openings, closingSelector) {\n        super(destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n    }\n    _next(value) {\n        const { contexts } = this;\n        if (contexts) {\n            const len = contexts.length;\n            for (let i = 0; i < len; i++) {\n                contexts[i].window.next(value);\n            }\n        }\n    }\n    _error(err) {\n        const { contexts } = this;\n        this.contexts = null;\n        if (contexts) {\n            const len = contexts.length;\n            let index = -1;\n            while (++index < len) {\n                const context = contexts[index];\n                context.window.error(err);\n                context.subscription.unsubscribe();\n            }\n        }\n        super._error(err);\n    }\n    _complete() {\n        const { contexts } = this;\n        this.contexts = null;\n        if (contexts) {\n            const len = contexts.length;\n            let index = -1;\n            while (++index < len) {\n                const context = contexts[index];\n                context.window.complete();\n                context.subscription.unsubscribe();\n            }\n        }\n        super._complete();\n    }\n    _unsubscribe() {\n        const { contexts } = this;\n        this.contexts = null;\n        if (contexts) {\n            const len = contexts.length;\n            let index = -1;\n            while (++index < len) {\n                const context = contexts[index];\n                context.window.unsubscribe();\n                context.subscription.unsubscribe();\n            }\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (outerValue === this.openings) {\n            let closingNotifier;\n            try {\n                const { closingSelector } = this;\n                closingNotifier = closingSelector(innerValue);\n            }\n            catch (e) {\n                return this.error(e);\n            }\n            const window = new Subject();\n            const subscription = new Subscription();\n            const context = { window, subscription };\n            this.contexts.push(context);\n            const innerSubscription = subscribeToResult(this, closingNotifier, context);\n            if (innerSubscription.closed) {\n                this.closeWindow(this.contexts.length - 1);\n            }\n            else {\n                innerSubscription.context = context;\n                subscription.add(innerSubscription);\n            }\n            this.destination.next(window);\n        }\n        else {\n            this.closeWindow(this.contexts.indexOf(outerValue));\n        }\n    }\n    notifyError(err) {\n        this.error(err);\n    }\n    notifyComplete(inner) {\n        if (inner !== this.openSubscription) {\n            this.closeWindow(this.contexts.indexOf(inner.context));\n        }\n    }\n    closeWindow(index) {\n        if (index === -1) {\n            return;\n        }\n        const { contexts } = this;\n        const context = contexts[index];\n        const { window, subscription } = context;\n        contexts.splice(index, 1);\n        window.complete();\n        subscription.unsubscribe();\n    }\n}\n//# sourceMappingURL=windowToggle.js.map"]},"metadata":{},"sourceType":"module"}