{"ast":null,"code":"import _possibleConstructorReturn from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _isNativeReflectConstruct from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nimport _getPrototypeOf from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeMap(project, resultSelector) {\n  var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;\n\n  if (typeof resultSelector === 'function') {\n    return function (source) {\n      return source.pipe(mergeMap(function (a, i) {\n        return from(project(a, i)).pipe(map(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }, concurrent));\n    };\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return function (source) {\n    return source.lift(new MergeMapOperator(project, concurrent));\n  };\n}\nexport var MergeMapOperator = /*#__PURE__*/function () {\n  function MergeMapOperator(project) {\n    var concurrent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.POSITIVE_INFINITY;\n\n    _classCallCheck(this, MergeMapOperator);\n\n    this.project = project;\n    this.concurrent = concurrent;\n  }\n\n  return _createClass(MergeMapOperator, [{\n    key: \"call\",\n    value: function call(observer, source) {\n      return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    }\n  }]);\n}();\nexport var MergeMapSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  function MergeMapSubscriber(destination, project) {\n    var _this;\n\n    var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;\n\n    _classCallCheck(this, MergeMapSubscriber);\n\n    _this = _callSuper(this, MergeMapSubscriber, [destination]);\n    _this.project = project;\n    _this.concurrent = concurrent;\n    _this.hasCompleted = false;\n    _this.buffer = [];\n    _this.active = 0;\n    _this.index = 0;\n    return _this;\n  }\n\n  _inherits(MergeMapSubscriber, _SimpleOuterSubscribe);\n\n  return _createClass(MergeMapSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      if (this.active < this.concurrent) {\n        this._tryNext(value);\n      } else {\n        this.buffer.push(value);\n      }\n    }\n  }, {\n    key: \"_tryNext\",\n    value: function _tryNext(value) {\n      var result;\n      var index = this.index++;\n\n      try {\n        result = this.project(value, index);\n      } catch (err) {\n        this.destination.error(err);\n        return;\n      }\n\n      this.active++;\n\n      this._innerSub(result);\n    }\n  }, {\n    key: \"_innerSub\",\n    value: function _innerSub(ish) {\n      var innerSubscriber = new SimpleInnerSubscriber(this);\n      var destination = this.destination;\n      destination.add(innerSubscriber);\n      var innerSubscription = innerSubscribe(ish, innerSubscriber);\n\n      if (innerSubscription !== innerSubscriber) {\n        destination.add(innerSubscription);\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.hasCompleted = true;\n\n      if (this.active === 0 && this.buffer.length === 0) {\n        this.destination.complete();\n      }\n\n      this.unsubscribe();\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(innerValue) {\n      this.destination.next(innerValue);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      var buffer = this.buffer;\n      this.active--;\n\n      if (buffer.length > 0) {\n        this._next(buffer.shift());\n      } else if (this.active === 0 && this.hasCompleted) {\n        this.destination.complete();\n      }\n    }\n  }]);\n}(SimpleOuterSubscriber);\nexport var flatMap = mergeMap; //# sourceMappingURL=mergeMap.js.map","map":{"version":3,"sources":["C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/rxjs/_esm2015/internal/operators/mergeMap.js"],"names":["map","from","SimpleOuterSubscriber","SimpleInnerSubscriber","innerSubscribe","mergeMap","project","resultSelector","concurrent","Number","POSITIVE_INFINITY","source","pipe","a","i","b","ii","lift","MergeMapOperator","call","observer","subscribe","MergeMapSubscriber","destination","hasCompleted","buffer","active","index","_next","value","_tryNext","push","result","err","error","_innerSub","ish","innerSubscriber","add","innerSubscription","_complete","length","complete","unsubscribe","notifyNext","innerValue","next","notifyComplete","shift","flatMap"],"mappings":"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","sourcesContent":["import { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeMap(project, resultSelector, concurrent = Number.POSITIVE_INFINITY) {\n    if (typeof resultSelector === 'function') {\n        return (source) => source.pipe(mergeMap((a, i) => from(project(a, i)).pipe(map((b, ii) => resultSelector(a, b, i, ii))), concurrent));\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return (source) => source.lift(new MergeMapOperator(project, concurrent));\n}\nexport class MergeMapOperator {\n    constructor(project, concurrent = Number.POSITIVE_INFINITY) {\n        this.project = project;\n        this.concurrent = concurrent;\n    }\n    call(observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    }\n}\nexport class MergeMapSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, project, concurrent = Number.POSITIVE_INFINITY) {\n        super(destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    _next(value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    _tryNext(value) {\n        let result;\n        const index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result);\n    }\n    _innerSub(ish) {\n        const innerSubscriber = new SimpleInnerSubscriber(this);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        const innerSubscription = innerSubscribe(ish, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            destination.add(innerSubscription);\n        }\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(innerValue) {\n        this.destination.next(innerValue);\n    }\n    notifyComplete() {\n        const buffer = this.buffer;\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    }\n}\nexport const flatMap = mergeMap;\n//# sourceMappingURL=mergeMap.js.map"]},"metadata":{},"sourceType":"module"}