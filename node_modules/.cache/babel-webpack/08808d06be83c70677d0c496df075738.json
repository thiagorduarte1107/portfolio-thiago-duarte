{"ast":null,"code":"import _possibleConstructorReturn from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _isNativeReflectConstruct from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nimport _getPrototypeOf from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n  if (subscriptionDelay) {\n    return function (source) {\n      return new SubscriptionDelayObservable(source, subscriptionDelay).lift(new DelayWhenOperator(delayDurationSelector));\n    };\n  }\n\n  return function (source) {\n    return source.lift(new DelayWhenOperator(delayDurationSelector));\n  };\n}\n\nvar DelayWhenOperator = /*#__PURE__*/function () {\n  function DelayWhenOperator(delayDurationSelector) {\n    _classCallCheck(this, DelayWhenOperator);\n\n    this.delayDurationSelector = delayDurationSelector;\n  }\n\n  return _createClass(DelayWhenOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    }\n  }]);\n}();\n\nvar DelayWhenSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  function DelayWhenSubscriber(destination, delayDurationSelector) {\n    var _this;\n\n    _classCallCheck(this, DelayWhenSubscriber);\n\n    _this = _callSuper(this, DelayWhenSubscriber, [destination]);\n    _this.delayDurationSelector = delayDurationSelector;\n    _this.completed = false;\n    _this.delayNotifierSubscriptions = [];\n    _this.index = 0;\n    return _this;\n  }\n\n  _inherits(DelayWhenSubscriber, _OuterSubscriber);\n\n  return _createClass(DelayWhenSubscriber, [{\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {\n      this.destination.next(outerValue);\n      this.removeSubscription(innerSub);\n      this.tryComplete();\n    }\n  }, {\n    key: \"notifyError\",\n    value: function notifyError(error, innerSub) {\n      this._error(error);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete(innerSub) {\n      var value = this.removeSubscription(innerSub);\n\n      if (value) {\n        this.destination.next(value);\n      }\n\n      this.tryComplete();\n    }\n  }, {\n    key: \"_next\",\n    value: function _next(value) {\n      var index = this.index++;\n\n      try {\n        var delayNotifier = this.delayDurationSelector(value, index);\n\n        if (delayNotifier) {\n          this.tryDelay(delayNotifier, value);\n        }\n      } catch (err) {\n        this.destination.error(err);\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.completed = true;\n      this.tryComplete();\n      this.unsubscribe();\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      subscription.unsubscribe();\n      var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n\n      if (subscriptionIdx !== -1) {\n        this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      }\n\n      return subscription.outerValue;\n    }\n  }, {\n    key: \"tryDelay\",\n    value: function tryDelay(delayNotifier, value) {\n      var notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n      if (notifierSubscription && !notifierSubscription.closed) {\n        var destination = this.destination;\n        destination.add(notifierSubscription);\n        this.delayNotifierSubscriptions.push(notifierSubscription);\n      }\n    }\n  }, {\n    key: \"tryComplete\",\n    value: function tryComplete() {\n      if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n        this.destination.complete();\n      }\n    }\n  }]);\n}(OuterSubscriber);\n\nvar SubscriptionDelayObservable = /*#__PURE__*/function (_Observable) {\n  function SubscriptionDelayObservable(source, subscriptionDelay) {\n    var _this2;\n\n    _classCallCheck(this, SubscriptionDelayObservable);\n\n    _this2 = _callSuper(this, SubscriptionDelayObservable);\n    _this2.source = source;\n    _this2.subscriptionDelay = subscriptionDelay;\n    return _this2;\n  }\n\n  _inherits(SubscriptionDelayObservable, _Observable);\n\n  return _createClass(SubscriptionDelayObservable, [{\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    }\n  }]);\n}(Observable);\n\nvar SubscriptionDelaySubscriber = /*#__PURE__*/function (_Subscriber) {\n  function SubscriptionDelaySubscriber(parent, source) {\n    var _this3;\n\n    _classCallCheck(this, SubscriptionDelaySubscriber);\n\n    _this3 = _callSuper(this, SubscriptionDelaySubscriber);\n    _this3.parent = parent;\n    _this3.source = source;\n    _this3.sourceSubscribed = false;\n    return _this3;\n  }\n\n  _inherits(SubscriptionDelaySubscriber, _Subscriber);\n\n  return _createClass(SubscriptionDelaySubscriber, [{\n    key: \"_next\",\n    value: function _next(unused) {\n      this.subscribeToSource();\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      this.unsubscribe();\n      this.parent.error(err);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.unsubscribe();\n      this.subscribeToSource();\n    }\n  }, {\n    key: \"subscribeToSource\",\n    value: function subscribeToSource() {\n      if (!this.sourceSubscribed) {\n        this.sourceSubscribed = true;\n        this.unsubscribe();\n        this.source.subscribe(this.parent);\n      }\n    }\n  }]);\n}(Subscriber); //# sourceMappingURL=delayWhen.js.map","map":{"version":3,"sources":["C:/Users/Thiago-510/CascadeProjects/portfolio-thiago-duarte/node_modules/rxjs/_esm2015/internal/operators/delayWhen.js"],"names":["Subscriber","Observable","OuterSubscriber","subscribeToResult","delayWhen","delayDurationSelector","subscriptionDelay","source","SubscriptionDelayObservable","lift","DelayWhenOperator","call","subscriber","subscribe","DelayWhenSubscriber","destination","completed","delayNotifierSubscriptions","index","notifyNext","outerValue","_innerValue","_outerIndex","_innerIndex","innerSub","next","removeSubscription","tryComplete","notifyError","error","_error","notifyComplete","value","_next","delayNotifier","tryDelay","err","_complete","unsubscribe","subscription","subscriptionIdx","indexOf","splice","notifierSubscription","closed","add","push","length","complete","_subscribe","SubscriptionDelaySubscriber","parent","sourceSubscribed","unused","subscribeToSource"],"mappings":"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","sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return (source) => new SubscriptionDelayObservable(source, subscriptionDelay)\n            .lift(new DelayWhenOperator(delayDurationSelector));\n    }\n    return (source) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\nclass DelayWhenOperator {\n    constructor(delayDurationSelector) {\n        this.delayDurationSelector = delayDurationSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    }\n}\nclass DelayWhenSubscriber extends OuterSubscriber {\n    constructor(destination, delayDurationSelector) {\n        super(destination);\n        this.delayDurationSelector = delayDurationSelector;\n        this.completed = false;\n        this.delayNotifierSubscriptions = [];\n        this.index = 0;\n    }\n    notifyNext(outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {\n        this.destination.next(outerValue);\n        this.removeSubscription(innerSub);\n        this.tryComplete();\n    }\n    notifyError(error, innerSub) {\n        this._error(error);\n    }\n    notifyComplete(innerSub) {\n        const value = this.removeSubscription(innerSub);\n        if (value) {\n            this.destination.next(value);\n        }\n        this.tryComplete();\n    }\n    _next(value) {\n        const index = this.index++;\n        try {\n            const delayNotifier = this.delayDurationSelector(value, index);\n            if (delayNotifier) {\n                this.tryDelay(delayNotifier, value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    }\n    _complete() {\n        this.completed = true;\n        this.tryComplete();\n        this.unsubscribe();\n    }\n    removeSubscription(subscription) {\n        subscription.unsubscribe();\n        const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n        if (subscriptionIdx !== -1) {\n            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n        }\n        return subscription.outerValue;\n    }\n    tryDelay(delayNotifier, value) {\n        const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            const destination = this.destination;\n            destination.add(notifierSubscription);\n            this.delayNotifierSubscriptions.push(notifierSubscription);\n        }\n    }\n    tryComplete() {\n        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n            this.destination.complete();\n        }\n    }\n}\nclass SubscriptionDelayObservable extends Observable {\n    constructor(source, subscriptionDelay) {\n        super();\n        this.source = source;\n        this.subscriptionDelay = subscriptionDelay;\n    }\n    _subscribe(subscriber) {\n        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    }\n}\nclass SubscriptionDelaySubscriber extends Subscriber {\n    constructor(parent, source) {\n        super();\n        this.parent = parent;\n        this.source = source;\n        this.sourceSubscribed = false;\n    }\n    _next(unused) {\n        this.subscribeToSource();\n    }\n    _error(err) {\n        this.unsubscribe();\n        this.parent.error(err);\n    }\n    _complete() {\n        this.unsubscribe();\n        this.subscribeToSource();\n    }\n    subscribeToSource() {\n        if (!this.sourceSubscribed) {\n            this.sourceSubscribed = true;\n            this.unsubscribe();\n            this.source.subscribe(this.parent);\n        }\n    }\n}\n//# sourceMappingURL=delayWhen.js.map"]},"metadata":{},"sourceType":"module"}